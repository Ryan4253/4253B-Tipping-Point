#include "main.h"

void initialize(){
	pros::lcd::initialize();
    master.setText(0, 0, "Current Autonomous: " + std::to_string(selectedAuton));
    pros::lcd::set_text(4, "init");

    //TODO bruh
    // Initializes Controller
    mogoController->tarePosition();
    mogoController->reset();
    liftController->reset();
    pros::lcd::set_text(2, "mogo & lift sensor reset");
}

void disabled(){}

void competition_initialize(){}

void autonomous(){
    // INITIALIZATION
    // lift.set_brake_mode(pros::motor_brake_mode_e::E_MOTOR_BRAKE_HOLD);
    // lift.setBrakeMode(AbstractMotor::brakeMode::hold);
    leftDrive.setBrakeMode(AbstractMotor::brakeMode::hold);
    rightDrive.setBrakeMode(AbstractMotor::brakeMode::hold);

    std::vector<std::vector<double>> curveLeft = {
        {0},
        {-0.0268},
        {-0.0624},
        {-0.1013},
        {-0.1395},
        {-0.1776},
        {-0.2157},
        {-0.2538},
        {-0.2919},
        {-0.3299},
        {-0.368},
        {-0.4059},
        {-0.4439},
        {-0.4818},
        {-0.5197},
        {-0.5584},
        {-0.5949},
        {-0.6342},
        {-0.6706},
        {-0.7098},
        {-0.7477},
        {-0.7842},
        {-0.8234},
        {-0.8605},
        {-0.8983},
        {-0.9368},
        {-0.9739},
        {-1.0117},
        {-1.0502},
        {-1.0873},
        {-1.1258},
        {-1.1629},
        {-1.2015},
        {-1.2387},
        {-1.2774},
        {-1.3155},
        {-1.3528},
        {-1.3917},
        {-1.4292},
        {-1.469},
        {-1.506},
        {-1.5446},
        {-1.5847},
        {-1.6221},
        {-1.6617},
        {-1.7009},
        {-1.7402},
        {-1.7791},
        {-1.8202},
        {-1.8588},
        {-1.8997},
        {-1.9401},
        {-1.9809},
        {-2.0219},
        {-2.0633},
        {-2.1042},
        {-2.1469},
        {-2.1899},
        {-2.2306},
        {-2.2756},
        {-2.3184},
        {-2.3616},
        {-2.4065},
        {-2.4506},
        {-2.4962},
        {-2.5418},
        {-2.5877},
        {-2.6335},
        {-2.6804},
        {-2.7283},
        {-2.7754},
        {-2.8242},
        {-2.8723},
        {-2.9219},
        {-2.9703},
        {-3.0214},
        {-3.0713},
        {-3.1221},
        {-3.1733},
        {-3.225},
        {-3.2775},
        {-3.3056},
        {-3.3163},
        {-3.3265},
        {-3.3377},
        {-3.3492},
        {-3.3596},
        {-3.3709},
        {-3.3811},
        {-3.3922},
        {-3.4022},
        {-3.4129},
        {-3.4231},
        {-3.4323},
        {-3.4434},
        {-3.4523},
        {-3.4619},
        {-3.4717},
        {-3.481},
        {-3.4901},
        {-3.4986},
        {-3.5078},
        {-3.5165},
        {-3.5246},
        {-3.5336},
        {-3.5411},
        {-3.5498},
        {-3.557},
        {-3.5654},
        {-3.5724},
        {-3.5804},
        {-3.5874},
        {-3.5946},
        {-3.6019},
        {-3.6085},
        {-3.6153},
        {-3.6222},
        {-3.6288},
        {-3.6349},
        {-3.6414},
        {-3.6474},
        {-3.6539},
        {-3.6594},
        {-3.6655},
        {-3.6715},
        {-3.6766},
        {-3.6827},
        {-3.6879},
        {-3.6935},
        {-3.6986},
        {-3.7038},
        {-3.7094},
        {-3.714},
        {-3.7193},
        {-3.7242},
        {-3.7291},
        {-3.7341},
        {-3.7385},
        {-3.7438},
        {-3.7481},
        {-3.7412},
        {-3.7002},
        {-3.6575},
        {-3.6148},
        {-3.5719},
        {-3.5289},
        {-3.4858},
        {-3.4421},
        {-3.3989},
        {-3.355},
        {-3.3112},
        {-3.2673},
        {-3.2232},
        {-3.1791},
        {-3.1349},
        {-3.0904},
        {-3.0458},
        {-3.0014},
        {-2.9566},
        {-2.9118},
        {-2.8669},
        {-2.822},
        {-2.7768},
        {-2.7319},
        {-2.6865},
        {-2.6414},
        {-2.596},
        {-2.5505},
        {-2.5051},
        {-2.4595},
        {-2.4139},
        {-2.3682},
        {-2.3224},
        {-2.2766},
        {-2.2307},
        {-2.1846},
        {-2.1386},
        {-2.0925},
        {-2.0464},
        {-2.0001},
        {-1.9537},
        {-1.9073},
        {-1.8608},
        {-1.8141},
        {-1.7675},
        {-1.7206},
        {-1.6738},
        {-1.6267},
        {-1.5796},
        {-1.5324},
        {-1.485},
        {-1.4375},
        {-1.3899},
        {-1.3421},
        {-1.2942},
        {-1.2461},
        {-1.1979},
        {-1.1495},
        {-1.101},
        {-1.0522},
        {-1.0033},
        {-0.9542},
        {-0.9049},
        {-0.8554},
        {-0.8058},
        {-0.756},
        {-0.706},
        {-0.6557},
        {-0.6053},
        {-0.5547},
        {-0.5042},
        {-0.4533},
        {-0.4022},
        {-0.3511},
        {-0.2998},
        {-0.2483},
        {-0.1968},
        {-0.1453},
        {-0.0941},
        {-0.0344}
    }
    ;
    std::vector<std::vector<double>> curveRight = {
        {0},
        {-0.0358},
        {-0.0878},
        {-0.149},
        {-0.211},
        {-0.273},
        {-0.335},
        {-0.397},
        {-0.459},
        {-0.521},
        {-0.5829},
        {-0.6449},
        {-0.7068},
        {-0.7687},
        {-0.8306},
        {-0.8921},
        {-0.9557},
        {-1.0163},
        {-1.0797},
        {-1.1402},
        {-1.2026},
        {-1.2662},
        {-1.3269},
        {-1.3899},
        {-1.452},
        {-1.5135},
        {-1.5765},
        {-1.6386},
        {-1.7},
        {-1.7629},
        {-1.8244},
        {-1.8872},
        {-1.9486},
        {-2.0114},
        {-2.0727},
        {-2.1347},
        {-2.1974},
        {-2.2585},
        {-2.3209},
        {-2.3812},
        {-2.4442},
        {-2.5056},
        {-2.5655},
        {-2.6281},
        {-2.6883},
        {-2.7492},
        {-2.8099},
        {-2.871},
        {-2.9299},
        {-2.9913},
        {-3.0504},
        {-3.1099},
        {-3.1691},
        {-3.2281},
        {-3.2868},
        {-3.3459},
        {-3.4031},
        {-3.4602},
        {-3.5195},
        {-3.5744},
        {-3.6317},
        {-3.6885},
        {-3.7436},
        {-3.7995},
        {-3.8538},
        {-3.9082},
        {-3.9623},
        {-4.0166},
        {-4.0697},
        {-4.1218},
        {-4.1746},
        {-4.2258},
        {-4.2778},
        {-4.3281},
        {-4.3797},
        {-4.4286},
        {-4.4788},
        {-4.5279},
        {-4.5767},
        {-4.625},
        {-4.6725},
        {-4.6943},
        {-4.6836},
        {-4.6734},
        {-4.6623},
        {-4.6508},
        {-4.6404},
        {-4.6291},
        {-4.6188},
        {-4.6078},
        {-4.5978},
        {-4.5871},
        {-4.5769},
        {-4.5677},
        {-4.5566},
        {-4.5477},
        {-4.5381},
        {-4.5283},
        {-4.519},
        {-4.5099},
        {-4.5013},
        {-4.4922},
        {-4.4835},
        {-4.4754},
        {-4.4664},
        {-4.4589},
        {-4.4502},
        {-4.443},
        {-4.4346},
        {-4.4276},
        {-4.4195},
        {-4.4126},
        {-4.4054},
        {-4.3981},
        {-4.3915},
        {-4.3847},
        {-4.3777},
        {-4.3712},
        {-4.3651},
        {-4.3585},
        {-4.3526},
        {-4.3461},
        {-4.3406},
        {-4.3345},
        {-4.3285},
        {-4.3233},
        {-4.3173},
        {-4.3121},
        {-4.3065},
        {-4.3014},
        {-4.2962},
        {-4.2906},
        {-4.2859},
        {-4.2807},
        {-4.2758},
        {-4.2709},
        {-4.2659},
        {-4.2615},
        {-4.2562},
        {-4.2519},
        {-4.2349},
        {-4.1806},
        {-4.1233},
        {-4.066},
        {-4.0089},
        {-3.952},
        {-3.8951},
        {-3.8387},
        {-3.782},
        {-3.7258},
        {-3.6696},
        {-3.6135},
        {-3.5576},
        {-3.5018},
        {-3.4459},
        {-3.3904},
        {-3.3351},
        {-3.2795},
        {-3.2243},
        {-3.169},
        {-3.1139},
        {-3.0588},
        {-3.004},
        {-2.9489},
        {-2.8943},
        {-2.8395},
        {-2.7849},
        {-2.7304},
        {-2.6758},
        {-2.6214},
        {-2.567},
        {-2.5127},
        {-2.4585},
        {-2.4043},
        {-2.3501},
        {-2.2962},
        {-2.2422},
        {-2.1883},
        {-2.1345},
        {-2.0807},
        {-2.0272},
        {-1.9736},
        {-1.9201},
        {-1.8667},
        {-1.8134},
        {-1.7602},
        {-1.7071},
        {-1.6541},
        {-1.6012},
        {-1.5485},
        {-1.4958},
        {-1.4433},
        {-1.391},
        {-1.3387},
        {-1.2866},
        {-1.2347},
        {-1.1829},
        {-1.1313},
        {-1.0799},
        {-1.0286},
        {-0.9774},
        {-0.9266},
        {-0.8759},
        {-0.8252},
        {-0.7749},
        {-0.7248},
        {-0.6748},
        {-0.6248},
        {-0.5752},
        {-0.5257},
        {-0.4764},
        {-0.4274},
        {-0.3781},
        {-0.3293},
        {-0.2806},
        {-0.2317},
        {-0.1831},
        {-0.1347},
        {-0.0865},
        {-0.0311}
    }
    ;
    
    std::vector<std::vector<double>> fwdRLeft = {
        {0},
        {0.0271},
        {0.0756},
        {0.1254},
        {0.1754},
        {0.2252},
        {0.2752},
        {0.3251},
        {0.3751},
        {0.4251},
        {0.4751},
        {0.5251},
        {0.5751},
        {0.6251},
        {0.6751},
        {0.7251},
        {0.7751},
        {0.825},
        {0.8751},
        {0.9251},
        {0.9751},
        {1.0251},
        {1.0751},
        {1.1251},
        {1.1751},
        {1.2251},
        {1.2751},
        {1.3251},
        {1.3751},
        {1.4251},
        {1.475},
        {1.525},
        {1.575},
        {1.6251},
        {1.6751},
        {1.725},
        {1.775},
        {1.8251},
        {1.875},
        {1.925},
        {1.9751},
        {2.025},
        {2.075},
        {2.125},
        {2.175},
        {2.225},
        {2.275},
        {2.3251},
        {2.3751},
        {2.425},
        {2.475},
        {2.5251},
        {2.5751},
        {2.625},
        {2.675},
        {2.725},
        {2.775},
        {2.825},
        {2.875},
        {2.925},
        {2.975},
        {3.025},
        {3.075},
        {3.125},
        {3.175},
        {3.225},
        {3.275},
        {3.325},
        {3.375},
        {3.425},
        {3.4751},
        {3.525},
        {3.575},
        {3.625},
        {3.6751},
        {3.725},
        {3.775},
        {3.8251},
        {3.875},
        {3.925},
        {3.975},
        {4.025},
        {4.075},
        {4.125},
        {4.175},
        {4.225},
        {4.275},
        {4.3251},
        {4.375},
        {4.425},
        {4.4594},
        {4.4191},
        {4.3691},
        {4.3191},
        {4.2692},
        {4.2191},
        {4.1691},
        {4.1192},
        {4.0692},
        {4.0191},
        {3.9691},
        {3.9191},
        {3.8691},
        {3.8191},
        {3.7691},
        {3.7192},
        {3.6691},
        {3.6191},
        {3.5691},
        {3.5191},
        {3.4692},
        {3.4192},
        {3.3692},
        {3.3192},
        {3.2692},
        {3.2192},
        {3.1692},
        {3.1192},
        {3.0692},
        {3.0191},
        {2.9691},
        {2.9192},
        {2.8691},
        {2.8192},
        {2.7692},
        {2.7191},
        {2.6691},
        {2.6191},
        {2.5692},
        {2.5192},
        {2.4692},
        {2.4191},
        {2.3692},
        {2.3192},
        {2.2692},
        {2.2192},
        {2.1692},
        {2.1192},
        {2.0692},
        {2.0192},
        {1.9692},
        {1.9192},
        {1.8692},
        {1.8192},
        {1.7692},
        {1.7192},
        {1.6692},
        {1.6192},
        {1.5692},
        {1.5192},
        {1.4691},
        {1.4192},
        {1.3692},
        {1.3192},
        {1.2692},
        {1.2192},
        {1.1692},
        {1.1192},
        {1.0692},
        {1.0192},
        {0.9692},
        {0.9192},
        {0.8692},
        {0.8192},
        {0.7692},
        {0.7191},
        {0.6692},
        {0.6192},
        {0.5692},
        {0.5192},
        {0.4691},
        {0.4192},
        {0.3692},
        {0.3191},
        {0.2692},
        {0.2191},
        {0.169},
        {0.1188},
        {0.0681}
    }
    ;
    std::vector<std::vector<double>> fwdRRight = {
        {0},
        {0.0271},
        {0.0756},
        {0.1254},
        {0.1754},
        {0.2252},
        {0.2752},
        {0.3251},
        {0.3751},
        {0.4251},
        {0.4751},
        {0.5251},
        {0.5751},
        {0.6251},
        {0.6751},
        {0.7251},
        {0.7751},
        {0.825},
        {0.8751},
        {0.9251},
        {0.9751},
        {1.0251},
        {1.0751},
        {1.1251},
        {1.1751},
        {1.2251},
        {1.2751},
        {1.3251},
        {1.3751},
        {1.4251},
        {1.475},
        {1.525},
        {1.575},
        {1.6251},
        {1.6751},
        {1.725},
        {1.775},
        {1.8251},
        {1.875},
        {1.925},
        {1.9751},
        {2.025},
        {2.075},
        {2.125},
        {2.175},
        {2.225},
        {2.275},
        {2.3251},
        {2.3751},
        {2.425},
        {2.475},
        {2.5251},
        {2.5751},
        {2.625},
        {2.675},
        {2.725},
        {2.775},
        {2.825},
        {2.875},
        {2.925},
        {2.975},
        {3.025},
        {3.075},
        {3.125},
        {3.175},
        {3.225},
        {3.275},
        {3.325},
        {3.375},
        {3.425},
        {3.4751},
        {3.525},
        {3.575},
        {3.625},
        {3.6751},
        {3.725},
        {3.775},
        {3.8251},
        {3.875},
        {3.925},
        {3.975},
        {4.025},
        {4.075},
        {4.125},
        {4.175},
        {4.225},
        {4.275},
        {4.3251},
        {4.375},
        {4.425},
        {4.4594},
        {4.4191},
        {4.3691},
        {4.3191},
        {4.2692},
        {4.2191},
        {4.1691},
        {4.1192},
        {4.0692},
        {4.0191},
        {3.9691},
        {3.9191},
        {3.8691},
        {3.8191},
        {3.7691},
        {3.7192},
        {3.6691},
        {3.6191},
        {3.5691},
        {3.5191},
        {3.4692},
        {3.4192},
        {3.3692},
        {3.3192},
        {3.2692},
        {3.2192},
        {3.1692},
        {3.1192},
        {3.0692},
        {3.0191},
        {2.9691},
        {2.9192},
        {2.8691},
        {2.8192},
        {2.7692},
        {2.7191},
        {2.6691},
        {2.6191},
        {2.5692},
        {2.5192},
        {2.4692},
        {2.4191},
        {2.3692},
        {2.3192},
        {2.2692},
        {2.2192},
        {2.1692},
        {2.1192},
        {2.0692},
        {2.0192},
        {1.9692},
        {1.9192},
        {1.8692},
        {1.8192},
        {1.7692},
        {1.7192},
        {1.6692},
        {1.6192},
        {1.5692},
        {1.5192},
        {1.4691},
        {1.4192},
        {1.3692},
        {1.3192},
        {1.2692},
        {1.2192},
        {1.1692},
        {1.1192},
        {1.0692},
        {1.0192},
        {0.9692},
        {0.9192},
        {0.8692},
        {0.8192},
        {0.7692},
        {0.7191},
        {0.6692},
        {0.6192},
        {0.5692},
        {0.5192},
        {0.4691},
        {0.4192},
        {0.3692},
        {0.3191},
        {0.2692},
        {0.2191},
        {0.169},
        {0.1188},
        {0.0681}
    }
    ;

    // mogo.set_value(true);
    // followPath(curveLeft, curveRight);
    // // claw.set_value(true);
    // mogo.set_value(false);
    // pros::delay(200);
    // // lift.move_relative(360, 200);
    // followPath(fwdRLeft, fwdRRight);
    // leftDrive.moveVelocity(200); rightDrive.moveVelocity(-200);
    // pros::delay(1000);
    // leftDrive.moveVelocity(0); rightDrive.moveVelocity(0);
    //----------------------------------------------------------------------//
    // LEFT AUTON
    followPath(LeftPaths::pathLeft, LeftPaths::pathRight);
    claw.set_value(true);
    // mogo.set_value(true);
    pros::delay(150);
    // lift.moveRelative(360, 200);
    followPath(LeftPaths::pathRLeft, LeftPaths::pathRRight);
    // followPath(LeftPaths::pathLeftR, LeftPaths::pathRightR);
    // pros::delay(500);
    // mogo.set_value(false);
    // pros::delay(500);
    // followPath(LeftPaths::fwdLeft, LeftPaths::fwdRight);
    // mogo.set_value(true);

    //---------------------------------------------------------------------------------//
    // AWP AUTON
    // mogo.set_value(true);
    // followPath(AWP::fwdRLeft, AWP::fwdRRight);
    // // mogo.set_value(false);
    // followPath(LeftPaths::fwdLeft, LeftPaths::fwdRight);
    //     mogo.set_value(false);
    // followPath(AWP::loopbackLeft, AWP::loopbackRight);
    // claw.set_value(true);
    // rightDrive.moveRelative(-360, 600);
    // leftDrive.moveRelative(1500, 600);
    

    //-----------------------------------------------------------------------------------------//
    // RIGHT AUTON
    // followPath(RightPaths::curveLeft, RightPaths::curveRight);
    // lift.move_relative(500, 200);
    // mogo.set_value(true);
    // followPath(RightPaths::curveRLeft, RightPaths::curveRRight);
    // mogo.set_value(false);
    // followPath(RightPaths::fwdLeft, RightPaths::fwdRight);
}

void opcontrol(){
    mogoController->reset();
    liftController->reset();
    // Configures brake type for drive & lift
    leftDrive.setBrakeMode(AbstractMotor::brakeMode::coast);
    rightDrive.setBrakeMode(AbstractMotor::brakeMode::coast);
    lift.setBrakeMode(AbstractMotor::brakeMode::brake);
    mogo.setBrakeMode(AbstractMotor::brakeMode::hold);
    
    // Initializes driver control variable
    double liftPosition = 0.0;
    bool mogoState = false, prevBtnState = false, currentBtnState = false;
    
    // Initializes logo on the brain screen
    // Gif gif("/usd/logo.gif", lv_scr_act()); // TODO - Make Gif Run in opcontrol

    while(true){
        /** 
         * @brief Chassis Control
         * Left Analog Y Stick -> Linear velocity the chassis drives in
         * Right Analog X Stick -> Curvature the chassis drives in
         */
	    double power = master.getAnalog(ControllerAnalog::leftY) * (abs(master.getAnalog(ControllerAnalog::leftY)) >= DEADBAND);
        double curvature = master.getAnalog(ControllerAnalog::rightX) * (abs(master.getAnalog(ControllerAnalog::rightX)) >= DEADBAND);
        auto speed = curvatureDrive(power, curvature, power == 0);
		(chassis->getModel())->tank(speed.first, speed.second);
        // leftDrive.moveVelocity(speed.first*600);
        // rightDrive.moveVelocity(speed.second*600);

        /**
         * @brief Lift Control
         * L1 (Left Top) Pressed -> Lift goes up
         * L2 (Left Bottom) Pressed -> Lift goes down
         * Both are pressed / both aren't pressed -> lift stays in the current position
         */
        // lift.moveVoltage((master.getDigital(ControllerDigital::L1) - master.getDigital(ControllerDigital::L2)) * 12000);
        // if(master.getDigital(ControllerDigital::L1)) lift.move_voltage(12000);
        // else if(master.getDigital(ControllerDigital::L2)) lift.move_voltage(-12000);
        // else lift.move_voltage(0);
        if(master.getDigital(ControllerDigital::L1)) lift.moveVelocity(200);
        else if(master.getDigital(ControllerDigital::L2)) lift.moveVelocity(-200);
        else lift.moveVelocity(0);

        /**
         * @brief Claw Control
         * R1 (Right Top) Pressed -> claw closes
         * R1 (Right Top) not pressed -> claw opens
         */
        claw.set_value(master.getDigital(ControllerDigital::R1));
        wings.set_value(master.getDigital(ControllerDigital::Y));

        /**
         * @brief Mogo Holder Control
         * The solenoid toggles between the two states every time R2 (Right Bottom) is pressed
         */
        // TODO - tune lift height & PID
        currentBtnState = master.getDigital(ControllerDigital::R2);
        if(currentBtnState && !prevBtnState){
            // mogo.set_value((mogoState = !mogoState));
            mogoState = !mogoState;
            mogoController->setTarget(mogoState ? MAX_MOGO_DISTANCE : 0);
        }
        prevBtnState = currentBtnState;
        
        double err = mogoController->getError();
        pros::lcd::set_text(1, "Error: " + std::to_string(err));

        pros::delay(10);
    }
}